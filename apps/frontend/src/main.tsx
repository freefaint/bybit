import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './style.css';

type State = { hasError: boolean; error: Error | null };

export class GlobalErrorBoundary extends React.Component<React.PropsWithChildren, State> {
  state: State = { hasError: false, error: null };

  static getDerivedStateFromError(error: Error) {
    // –û–±–Ω–æ–≤–ª—è–µ–º state, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∞—Å–∫—É
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Sentry/console/–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ
    console.error("üí• –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–∏–∑–¥–µ—Ü:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: 40, fontFamily: "monospace", color: "red" }}>
          <h1>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¨</h1>
          <pre>{this.state.error?.message}</pre>
        </div>
      );
    }
    return this.props.children;
  }
}

createRoot(document.getElementById('root')!).render(<GlobalErrorBoundary><App /></GlobalErrorBoundary>);
